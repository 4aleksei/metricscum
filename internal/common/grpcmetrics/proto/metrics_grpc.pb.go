// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: proto/metrics.proto

package grpcmetrics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StreamMultiService_UpdateRequest_FullMethodName      = "/grpcmetrics.StreamMultiService/UpdateRequest"
	StreamMultiService_MultiUpdateRequest_FullMethodName = "/grpcmetrics.StreamMultiService/MultiUpdateRequest"
	StreamMultiService_GetMetric_FullMethodName          = "/grpcmetrics.StreamMultiService/GetMetric"
	StreamMultiService_GetMetrics_FullMethodName         = "/grpcmetrics.StreamMultiService/GetMetrics"
)

// StreamMultiServiceClient is the client API for StreamMultiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamMultiServiceClient interface {
	UpdateRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	MultiUpdateRequest(ctx context.Context, in *MultiUpdate, opts ...grpc.CallOption) (*MultiResponse, error)
	GetMetric(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetMetrics(ctx context.Context, in *RequestMetrics, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Metric], error)
}

type streamMultiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamMultiServiceClient(cc grpc.ClientConnInterface) StreamMultiServiceClient {
	return &streamMultiServiceClient{cc}
}

func (c *streamMultiServiceClient) UpdateRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, StreamMultiService_UpdateRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamMultiServiceClient) MultiUpdateRequest(ctx context.Context, in *MultiUpdate, opts ...grpc.CallOption) (*MultiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiResponse)
	err := c.cc.Invoke(ctx, StreamMultiService_MultiUpdateRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamMultiServiceClient) GetMetric(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, StreamMultiService_GetMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamMultiServiceClient) GetMetrics(ctx context.Context, in *RequestMetrics, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Metric], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamMultiService_ServiceDesc.Streams[0], StreamMultiService_GetMetrics_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RequestMetrics, Metric]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamMultiService_GetMetricsClient = grpc.ServerStreamingClient[Metric]

// StreamMultiServiceServer is the server API for StreamMultiService service.
// All implementations must embed UnimplementedStreamMultiServiceServer
// for forward compatibility.
type StreamMultiServiceServer interface {
	UpdateRequest(context.Context, *Request) (*Response, error)
	MultiUpdateRequest(context.Context, *MultiUpdate) (*MultiResponse, error)
	GetMetric(context.Context, *Request) (*Response, error)
	GetMetrics(*RequestMetrics, grpc.ServerStreamingServer[Metric]) error
	mustEmbedUnimplementedStreamMultiServiceServer()
}

// UnimplementedStreamMultiServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamMultiServiceServer struct{}

func (UnimplementedStreamMultiServiceServer) UpdateRequest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRequest not implemented")
}
func (UnimplementedStreamMultiServiceServer) MultiUpdateRequest(context.Context, *MultiUpdate) (*MultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiUpdateRequest not implemented")
}
func (UnimplementedStreamMultiServiceServer) GetMetric(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetric not implemented")
}
func (UnimplementedStreamMultiServiceServer) GetMetrics(*RequestMetrics, grpc.ServerStreamingServer[Metric]) error {
	return status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedStreamMultiServiceServer) mustEmbedUnimplementedStreamMultiServiceServer() {}
func (UnimplementedStreamMultiServiceServer) testEmbeddedByValue()                            {}

// UnsafeStreamMultiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamMultiServiceServer will
// result in compilation errors.
type UnsafeStreamMultiServiceServer interface {
	mustEmbedUnimplementedStreamMultiServiceServer()
}

func RegisterStreamMultiServiceServer(s grpc.ServiceRegistrar, srv StreamMultiServiceServer) {
	// If the following call pancis, it indicates UnimplementedStreamMultiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamMultiService_ServiceDesc, srv)
}

func _StreamMultiService_UpdateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamMultiServiceServer).UpdateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamMultiService_UpdateRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamMultiServiceServer).UpdateRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamMultiService_MultiUpdateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamMultiServiceServer).MultiUpdateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamMultiService_MultiUpdateRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamMultiServiceServer).MultiUpdateRequest(ctx, req.(*MultiUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamMultiService_GetMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamMultiServiceServer).GetMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamMultiService_GetMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamMultiServiceServer).GetMetric(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamMultiService_GetMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestMetrics)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamMultiServiceServer).GetMetrics(m, &grpc.GenericServerStream[RequestMetrics, Metric]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamMultiService_GetMetricsServer = grpc.ServerStreamingServer[Metric]

// StreamMultiService_ServiceDesc is the grpc.ServiceDesc for StreamMultiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamMultiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcmetrics.StreamMultiService",
	HandlerType: (*StreamMultiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateRequest",
			Handler:    _StreamMultiService_UpdateRequest_Handler,
		},
		{
			MethodName: "MultiUpdateRequest",
			Handler:    _StreamMultiService_MultiUpdateRequest_Handler,
		},
		{
			MethodName: "GetMetric",
			Handler:    _StreamMultiService_GetMetric_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMetrics",
			Handler:       _StreamMultiService_GetMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/metrics.proto",
}
