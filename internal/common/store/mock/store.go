// Code generated by MockGen. DO NOT EDIT.
// Source: internal/common/store/store.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	store "github.com/4aleksei/metricscum/internal/common/store"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStore) Close(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", ctx)
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close), ctx)
}

// Ping mocks base method.
func (m *MockStore) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStoreMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStore)(nil).Ping), ctx)
}

// SelectValue mocks base method.
func (m *MockStore) SelectValue(ctx context.Context, name string, prog func(string, int, int64, float64) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectValue", ctx, name, prog)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectValue indicates an expected call of SelectValue.
func (mr *MockStoreMockRecorder) SelectValue(ctx, name, prog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectValue", reflect.TypeOf((*MockStore)(nil).SelectValue), ctx, name, prog)
}

// SelectValueAll mocks base method.
func (m *MockStore) SelectValueAll(ctx context.Context, prog func(string, int, int64, float64) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectValueAll", ctx, prog)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectValueAll indicates an expected call of SelectValueAll.
func (mr *MockStoreMockRecorder) SelectValueAll(ctx, prog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectValueAll", reflect.TypeOf((*MockStore)(nil).SelectValueAll), ctx, prog)
}

// Upsert mocks base method.
func (m *MockStore) Upsert(ctx context.Context, val store.Metrics, prog func(string, int, int64, float64) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, val, prog)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockStoreMockRecorder) Upsert(ctx, val, prog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockStore)(nil).Upsert), ctx, val, prog)
}

// Upserts mocks base method.
func (m *MockStore) Upserts(ctx context.Context, vals []store.Metrics, lim int, prog func(string, int, int64, float64) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upserts", ctx, vals, lim, prog)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upserts indicates an expected call of Upserts.
func (mr *MockStoreMockRecorder) Upserts(ctx, vals, lim, prog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upserts", reflect.TypeOf((*MockStore)(nil).Upserts), ctx, vals, lim, prog)
}
